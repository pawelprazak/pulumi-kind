{
    "name": "kind",
    "description": "A Pulumi package for creating and managing kind resources.",
    "keywords": [
        "pulumi",
        "kind"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`kind` Terraform Provider](https://github.com/kyma-incubator/terraform-provider-kind).",
    "repository": "https://github.com/pawelprazak/pulumi-kind",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {},
    "types": {
        "kind:index/ClusterKindConfig:ClusterKindConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerdConfigPatches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networking": {
                    "$ref": "#/types/kind:index/ClusterKindConfigNetworking:ClusterKindConfigNetworking",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kind:index/ClusterKindConfigNode:ClusterKindConfigNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "kind"
            ]
        },
        "kind:index/ClusterKindConfigNetworking:ClusterKindConfigNetworking": {
            "properties": {
                "apiServerAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableDefaultCni": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipFamily": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeProxyMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceSubnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "kind:index/ClusterKindConfigNode:ClusterKindConfigNode": {
            "properties": {
                "extraMounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kind:index/ClusterKindConfigNodeExtraMount:ClusterKindConfigNodeExtraMount"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraPortMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/kind:index/ClusterKindConfigNodeExtraPortMapping:ClusterKindConfigNodeExtraPortMapping"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeadmConfigPatches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "kind:index/ClusterKindConfigNodeExtraMount:ClusterKindConfigNodeExtraMount": {
            "properties": {
                "containerPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "kind:index/ClusterKindConfigNodeExtraPortMapping:ClusterKindConfigNodeExtraPortMapping": {
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the kind package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n"
    },
    "resources": {
        "kind:index/cluster:Cluster": {
            "description": "## # kind.Cluster\n\nProvides a Kind cluster resource. This can be used to create and delete Kind\nclusters. It does NOT support modification to an existing kind cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kind from \"@pulumi/kind\";\n\n// Create a kind cluster of the name \"test-cluster\" with default kubernetes\n// version specified in kind\n// ref: https://github.com/kubernetes-sigs/kind/blob/master/pkg/apis/config/defaults/image.go#L21\nconst defaultCluster = new kind.Cluster(\"default\", {});\n```\n```python\nimport pulumi\nimport pulumi_kind as kind\n\n# Create a kind cluster of the name \"test-cluster\" with default kubernetes\n# version specified in kind\n# ref: https://github.com/kubernetes-sigs/kind/blob/master/pkg/apis/config/defaults/image.go#L21\ndefault = kind.Cluster(\"default\")\n```\n```csharp\nusing Pulumi;\nusing Kind = Pulumi.Kind;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a kind cluster of the name \"test-cluster\" with default kubernetes\n        // version specified in kind\n        // ref: https://github.com/kubernetes-sigs/kind/blob/master/pkg/apis/config/defaults/image.go#L21\n        var @default = new Kind.Cluster(\"default\", new Kind.ClusterArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pawelprazak/pulumi-kind/sdk/go/kind\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kind.NewCluster(ctx, \"_default\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nTo override the node image used:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kind from \"@pulumi/kind\";\n\n// Create a cluster with kind of the name \"test-cluster\" with kubernetes version v1.16.1\nconst defaultCluster = new kind.Cluster(\"default\", {\n    nodeImage: \"kindest/node:v1.16.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_kind as kind\n\n# Create a cluster with kind of the name \"test-cluster\" with kubernetes version v1.16.1\ndefault = kind.Cluster(\"default\", node_image=\"kindest/node:v1.16.1\")\n```\n```csharp\nusing Pulumi;\nusing Kind = Pulumi.Kind;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a cluster with kind of the name \"test-cluster\" with kubernetes version v1.16.1\n        var @default = new Kind.Cluster(\"default\", new Kind.ClusterArgs\n        {\n            NodeImage = \"kindest/node:v1.16.1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pawelprazak/pulumi-kind/sdk/go/kind\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kind.NewCluster(ctx, \"_default\", \u0026kind.ClusterArgs{\n\t\t\tNodeImage: pulumi.String(\"kindest/node:v1.16.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nTo override the default kind config:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kind from \"@pulumi/kind\";\n\n// creating a cluster with kind of the name \"test-cluster\" with kubernetes version v1.18.4 and two nodes\nconst defaultCluster = new kind.Cluster(\"default\", {\n    kindConfig: {\n        apiVersion: \"kind.x-k8s.io/v1alpha4\",\n        kind: \"Cluster\",\n        nodes: [\n            {\n                role: \"control-plane\",\n            },\n            {\n                role: \"worker\",\n            },\n        ],\n    },\n    nodeImage: \"kindest/node:v1.18.4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_kind as kind\n\n# creating a cluster with kind of the name \"test-cluster\" with kubernetes version v1.18.4 and two nodes\ndefault = kind.Cluster(\"default\",\n    kind_config=kind.ClusterKindConfigArgs(\n        api_version=\"kind.x-k8s.io/v1alpha4\",\n        kind=\"Cluster\",\n        nodes=[\n            kind.ClusterKindConfigNodeArgs(\n                role=\"control-plane\",\n            ),\n            kind.ClusterKindConfigNodeArgs(\n                role=\"worker\",\n            ),\n        ],\n    ),\n    node_image=\"kindest/node:v1.18.4\")\n```\n```csharp\nusing Pulumi;\nusing Kind = Pulumi.Kind;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // creating a cluster with kind of the name \"test-cluster\" with kubernetes version v1.18.4 and two nodes\n        var @default = new Kind.Cluster(\"default\", new Kind.ClusterArgs\n        {\n            KindConfig = new Kind.Inputs.ClusterKindConfigArgs\n            {\n                ApiVersion = \"kind.x-k8s.io/v1alpha4\",\n                Kind = \"Cluster\",\n                Nodes = \n                {\n                    new Kind.Inputs.ClusterKindConfigNodeArgs\n                    {\n                        Role = \"control-plane\",\n                    },\n                    new Kind.Inputs.ClusterKindConfigNodeArgs\n                    {\n                        Role = \"worker\",\n                    },\n                },\n            },\n            NodeImage = \"kindest/node:v1.18.4\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pawelprazak/pulumi-kind/sdk/go/kind\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kind.NewCluster(ctx, \"_default\", \u0026kind.ClusterArgs{\n\t\t\tKindConfig: \u0026kind.ClusterKindConfigArgs{\n\t\t\t\tApiVersion: pulumi.String(\"kind.x-k8s.io/v1alpha4\"),\n\t\t\t\tKind:       pulumi.String(\"Cluster\"),\n\t\t\t\tNodes: kind.ClusterKindConfigNodeArray{\n\t\t\t\t\t\u0026kind.ClusterKindConfigNodeArgs{\n\t\t\t\t\t\tRole: pulumi.String(\"control-plane\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026kind.ClusterKindConfigNodeArgs{\n\t\t\t\t\t\tRole: pulumi.String(\"worker\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeImage: pulumi.String(\"kindest/node:v1.18.4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kind from \"@pulumi/kind\";\n\n// Create a cluster with patches applied to the containerd config\nconst defaultCluster = new kind.Cluster(\"default\", {\n    kindConfig: {\n        containerdConfigPatches: [`[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:5000\"]\n    endpoint = [\"http://kind-registry:5000\"]\n`],\n    },\n    nodeImage: \"kindest/node:v1.16.1\",\n});\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "Client certificate for authenticating to cluster.\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "Client key for authenticating to cluster.\n"
                },
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "Client verifies the server certificate with this CA cert.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Kubernetes APIServer endpoint.\n"
                },
                "kindConfig": {
                    "$ref": "#/types/kind:index/ClusterKindConfig:ClusterKindConfig",
                    "description": "The kind_config that kind will use.\n"
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "Kubeconfig set after the the cluster is created.\n"
                },
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Kubeconfig path set after the the cluster is created or by the user to override defaults.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kind name that is given to the created cluster.\n"
                },
                "nodeImage": {
                    "type": "string",
                    "description": "The node_image that kind will use (ex: kindest/node:v1.15.3).\n"
                },
                "waitForReady": {
                    "type": "boolean",
                    "description": "Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.\n"
                }
            },
            "required": [
                "clientCertificate",
                "clientKey",
                "clusterCaCertificate",
                "endpoint",
                "kubeconfig",
                "kubeconfigPath",
                "name",
                "nodeImage"
            ],
            "inputProperties": {
                "kindConfig": {
                    "$ref": "#/types/kind:index/ClusterKindConfig:ClusterKindConfig",
                    "description": "The kind_config that kind will use.\n"
                },
                "kubeconfigPath": {
                    "type": "string",
                    "description": "Kubeconfig path set after the the cluster is created or by the user to override defaults.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The kind name that is given to the created cluster.\n"
                },
                "nodeImage": {
                    "type": "string",
                    "description": "The node_image that kind will use (ex: kindest/node:v1.15.3).\n"
                },
                "waitForReady": {
                    "type": "boolean",
                    "description": "Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clientCertificate": {
                        "type": "string",
                        "description": "Client certificate for authenticating to cluster.\n"
                    },
                    "clientKey": {
                        "type": "string",
                        "description": "Client key for authenticating to cluster.\n"
                    },
                    "clusterCaCertificate": {
                        "type": "string",
                        "description": "Client verifies the server certificate with this CA cert.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Kubernetes APIServer endpoint.\n"
                    },
                    "kindConfig": {
                        "$ref": "#/types/kind:index/ClusterKindConfig:ClusterKindConfig",
                        "description": "The kind_config that kind will use.\n"
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "Kubeconfig set after the the cluster is created.\n"
                    },
                    "kubeconfigPath": {
                        "type": "string",
                        "description": "Kubeconfig path set after the the cluster is created or by the user to override defaults.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The kind name that is given to the created cluster.\n"
                    },
                    "nodeImage": {
                        "type": "string",
                        "description": "The node_image that kind will use (ex: kindest/node:v1.15.3).\n"
                    },
                    "waitForReady": {
                        "type": "boolean",
                        "description": "Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pawelprazak/pulumi-kind/sdk/go/kind"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing kind resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kyma-incubator/terraform-provider-kind)\n\u003e distributed under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). If you encounter a bug or missing feature,\n\u003e first check the [`pawelprazak/pulumi-kind` repo](https://github.com/pawelprazak/pulumi-kind/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`kyma-incubator/terraform-provider-kind` repo](https://github.com/kyma-incubator/terraform-provider-kind/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kyma-incubator/terraform-provider-kind)\n\u003e distributed under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). If you encounter a bug or missing feature,\n\u003e first check the [`pawelprazak/pulumi-kind` repo](https://github.com/pawelprazak/pulumi-kind/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`kyma-incubator/terraform-provider-kind` repo](https://github.com/kyma-incubator/terraform-provider-kind/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}