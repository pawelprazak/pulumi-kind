# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClusterKindConfigArgs',
    'ClusterKindConfigNetworkingArgs',
    'ClusterKindConfigNodeArgs',
    'ClusterKindConfigNodeExtraMountArgs',
    'ClusterKindConfigNodeExtraPortMappingArgs',
]

@pulumi.input_type
class ClusterKindConfigArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 containerd_config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 networking: Optional[pulumi.Input['ClusterKindConfigNetworkingArgs']] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeArgs']]]] = None):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        if containerd_config_patches is not None:
            pulumi.set(__self__, "containerd_config_patches", containerd_config_patches)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="containerdConfigPatches")
    def containerd_config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "containerd_config_patches")

    @containerd_config_patches.setter
    def containerd_config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "containerd_config_patches", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['ClusterKindConfigNetworkingArgs']]:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['ClusterKindConfigNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeArgs']]]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


@pulumi.input_type
class ClusterKindConfigNetworkingArgs:
    def __init__(__self__, *,
                 api_server_address: Optional[pulumi.Input[str]] = None,
                 api_server_port: Optional[pulumi.Input[int]] = None,
                 disable_default_cni: Optional[pulumi.Input[bool]] = None,
                 ip_family: Optional[pulumi.Input[str]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[str]] = None,
                 pod_subnet: Optional[pulumi.Input[str]] = None,
                 service_subnet: Optional[pulumi.Input[str]] = None):
        if api_server_address is not None:
            pulumi.set(__self__, "api_server_address", api_server_address)
        if api_server_port is not None:
            pulumi.set(__self__, "api_server_port", api_server_port)
        if disable_default_cni is not None:
            pulumi.set(__self__, "disable_default_cni", disable_default_cni)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)

    @property
    @pulumi.getter(name="apiServerAddress")
    def api_server_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_server_address")

    @api_server_address.setter
    def api_server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_server_address", value)

    @property
    @pulumi.getter(name="apiServerPort")
    def api_server_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "api_server_port")

    @api_server_port.setter
    def api_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_server_port", value)

    @property
    @pulumi.getter(name="disableDefaultCni")
    def disable_default_cni(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_default_cni")

    @disable_default_cni.setter
    def disable_default_cni(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_default_cni", value)

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_family")

    @ip_family.setter
    def ip_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_family", value)

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_subnet", value)

    @property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_subnet", value)


@pulumi.input_type
class ClusterKindConfigNodeArgs:
    def __init__(__self__, *,
                 extra_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraMountArgs']]]] = None,
                 extra_port_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraPortMappingArgs']]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 kubeadm_config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        if extra_mounts is not None:
            pulumi.set(__self__, "extra_mounts", extra_mounts)
        if extra_port_mappings is not None:
            pulumi.set(__self__, "extra_port_mappings", extra_port_mappings)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if kubeadm_config_patches is not None:
            pulumi.set(__self__, "kubeadm_config_patches", kubeadm_config_patches)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="extraMounts")
    def extra_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraMountArgs']]]]:
        return pulumi.get(self, "extra_mounts")

    @extra_mounts.setter
    def extra_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraMountArgs']]]]):
        pulumi.set(self, "extra_mounts", value)

    @property
    @pulumi.getter(name="extraPortMappings")
    def extra_port_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraPortMappingArgs']]]]:
        return pulumi.get(self, "extra_port_mappings")

    @extra_port_mappings.setter
    def extra_port_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterKindConfigNodeExtraPortMappingArgs']]]]):
        pulumi.set(self, "extra_port_mappings", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="kubeadmConfigPatches")
    def kubeadm_config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubeadm_config_patches")

    @kubeadm_config_patches.setter
    def kubeadm_config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubeadm_config_patches", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ClusterKindConfigNodeExtraMountArgs:
    def __init__(__self__, *,
                 container_path: Optional[pulumi.Input[str]] = None,
                 host_path: Optional[pulumi.Input[str]] = None):
        if container_path is not None:
            pulumi.set(__self__, "container_path", container_path)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_path")

    @container_path.setter
    def container_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_path", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_path", value)


@pulumi.input_type
class ClusterKindConfigNodeExtraPortMappingArgs:
    def __init__(__self__, *,
                 container_port: Optional[pulumi.Input[int]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 listen_address: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if listen_address is not None:
            pulumi.set(__self__, "listen_address", listen_address)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter(name="listenAddress")
    def listen_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "listen_address")

    @listen_address.setter
    def listen_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listen_address", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


