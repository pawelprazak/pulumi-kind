# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClusterKindConfig',
    'ClusterKindConfigNetworking',
    'ClusterKindConfigNode',
    'ClusterKindConfigNodeExtraMount',
    'ClusterKindConfigNodeExtraPortMapping',
]

@pulumi.output_type
class ClusterKindConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "containerdConfigPatches":
            suggest = "containerd_config_patches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKindConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKindConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKindConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 containerd_config_patches: Optional[Sequence[str]] = None,
                 networking: Optional['outputs.ClusterKindConfigNetworking'] = None,
                 nodes: Optional[Sequence['outputs.ClusterKindConfigNode']] = None):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        if containerd_config_patches is not None:
            pulumi.set(__self__, "containerd_config_patches", containerd_config_patches)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="containerdConfigPatches")
    def containerd_config_patches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "containerd_config_patches")

    @property
    @pulumi.getter
    def networking(self) -> Optional['outputs.ClusterKindConfigNetworking']:
        return pulumi.get(self, "networking")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.ClusterKindConfigNode']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class ClusterKindConfigNetworking(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiServerAddress":
            suggest = "api_server_address"
        elif key == "apiServerPort":
            suggest = "api_server_port"
        elif key == "disableDefaultCni":
            suggest = "disable_default_cni"
        elif key == "ipFamily":
            suggest = "ip_family"
        elif key == "kubeProxyMode":
            suggest = "kube_proxy_mode"
        elif key == "podSubnet":
            suggest = "pod_subnet"
        elif key == "serviceSubnet":
            suggest = "service_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKindConfigNetworking. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKindConfigNetworking.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKindConfigNetworking.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_server_address: Optional[str] = None,
                 api_server_port: Optional[int] = None,
                 disable_default_cni: Optional[bool] = None,
                 ip_family: Optional[str] = None,
                 kube_proxy_mode: Optional[str] = None,
                 pod_subnet: Optional[str] = None,
                 service_subnet: Optional[str] = None):
        if api_server_address is not None:
            pulumi.set(__self__, "api_server_address", api_server_address)
        if api_server_port is not None:
            pulumi.set(__self__, "api_server_port", api_server_port)
        if disable_default_cni is not None:
            pulumi.set(__self__, "disable_default_cni", disable_default_cni)
        if ip_family is not None:
            pulumi.set(__self__, "ip_family", ip_family)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)

    @property
    @pulumi.getter(name="apiServerAddress")
    def api_server_address(self) -> Optional[str]:
        return pulumi.get(self, "api_server_address")

    @property
    @pulumi.getter(name="apiServerPort")
    def api_server_port(self) -> Optional[int]:
        return pulumi.get(self, "api_server_port")

    @property
    @pulumi.getter(name="disableDefaultCni")
    def disable_default_cni(self) -> Optional[bool]:
        return pulumi.get(self, "disable_default_cni")

    @property
    @pulumi.getter(name="ipFamily")
    def ip_family(self) -> Optional[str]:
        return pulumi.get(self, "ip_family")

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[str]:
        return pulumi.get(self, "kube_proxy_mode")

    @property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[str]:
        return pulumi.get(self, "pod_subnet")

    @property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[str]:
        return pulumi.get(self, "service_subnet")


@pulumi.output_type
class ClusterKindConfigNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extraMounts":
            suggest = "extra_mounts"
        elif key == "extraPortMappings":
            suggest = "extra_port_mappings"
        elif key == "kubeadmConfigPatches":
            suggest = "kubeadm_config_patches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKindConfigNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKindConfigNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKindConfigNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extra_mounts: Optional[Sequence['outputs.ClusterKindConfigNodeExtraMount']] = None,
                 extra_port_mappings: Optional[Sequence['outputs.ClusterKindConfigNodeExtraPortMapping']] = None,
                 image: Optional[str] = None,
                 kubeadm_config_patches: Optional[Sequence[str]] = None,
                 role: Optional[str] = None):
        if extra_mounts is not None:
            pulumi.set(__self__, "extra_mounts", extra_mounts)
        if extra_port_mappings is not None:
            pulumi.set(__self__, "extra_port_mappings", extra_port_mappings)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if kubeadm_config_patches is not None:
            pulumi.set(__self__, "kubeadm_config_patches", kubeadm_config_patches)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="extraMounts")
    def extra_mounts(self) -> Optional[Sequence['outputs.ClusterKindConfigNodeExtraMount']]:
        return pulumi.get(self, "extra_mounts")

    @property
    @pulumi.getter(name="extraPortMappings")
    def extra_port_mappings(self) -> Optional[Sequence['outputs.ClusterKindConfigNodeExtraPortMapping']]:
        return pulumi.get(self, "extra_port_mappings")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="kubeadmConfigPatches")
    def kubeadm_config_patches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kubeadm_config_patches")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class ClusterKindConfigNodeExtraMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPath":
            suggest = "container_path"
        elif key == "hostPath":
            suggest = "host_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKindConfigNodeExtraMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKindConfigNodeExtraMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKindConfigNodeExtraMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_path: Optional[str] = None,
                 host_path: Optional[str] = None):
        if container_path is not None:
            pulumi.set(__self__, "container_path", container_path)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> Optional[str]:
        return pulumi.get(self, "container_path")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[str]:
        return pulumi.get(self, "host_path")


@pulumi.output_type
class ClusterKindConfigNodeExtraPortMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"
        elif key == "hostPort":
            suggest = "host_port"
        elif key == "listenAddress":
            suggest = "listen_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKindConfigNodeExtraPortMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKindConfigNodeExtraPortMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKindConfigNodeExtraPortMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: Optional[int] = None,
                 host_port: Optional[int] = None,
                 listen_address: Optional[str] = None,
                 protocol: Optional[str] = None):
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if listen_address is not None:
            pulumi.set(__self__, "listen_address", listen_address)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[int]:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[int]:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter(name="listenAddress")
    def listen_address(self) -> Optional[str]:
        return pulumi.get(self, "listen_address")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


