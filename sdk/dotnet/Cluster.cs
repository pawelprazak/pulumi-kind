// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kind
{
    /// <summary>
    /// ## # kind.Cluster
    /// 
    /// Provides a Kind cluster resource. This can be used to create and delete Kind
    /// clusters. It does NOT support modification to an existing kind cluster.
    /// </summary>
    [KindResourceType("kind:index/cluster:Cluster")]
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// Client certificate for authenticating to cluster.
        /// </summary>
        [Output("clientCertificate")]
        public Output<string> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Client key for authenticating to cluster.
        /// </summary>
        [Output("clientKey")]
        public Output<string> ClientKey { get; private set; } = null!;

        /// <summary>
        /// Client verifies the server certificate with this CA cert.
        /// </summary>
        [Output("clusterCaCertificate")]
        public Output<string> ClusterCaCertificate { get; private set; } = null!;

        /// <summary>
        /// Kubernetes APIServer endpoint.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The kind_config that kind will use.
        /// </summary>
        [Output("kindConfig")]
        public Output<Outputs.ClusterKindConfig?> KindConfig { get; private set; } = null!;

        /// <summary>
        /// The kubeconfig for the cluster after it is created
        /// </summary>
        [Output("kubeconfig")]
        public Output<string> Kubeconfig { get; private set; } = null!;

        /// <summary>
        /// kubeconfig path set after the the cluster is created or by the user to override defaults.
        /// </summary>
        [Output("kubeconfigPath")]
        public Output<string> KubeconfigPath { get; private set; } = null!;

        /// <summary>
        /// The kind name that is given to the created cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The node_image that kind will use (ex: kindest/node:v1.15.3).
        /// </summary>
        [Output("nodeImage")]
        public Output<string> NodeImage { get; private set; } = null!;

        /// <summary>
        /// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
        /// </summary>
        [Output("waitForReady")]
        public Output<bool?> WaitForReady { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("kind:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("kind:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The kind_config that kind will use.
        /// </summary>
        [Input("kindConfig")]
        public Input<Inputs.ClusterKindConfigArgs>? KindConfig { get; set; }

        /// <summary>
        /// kubeconfig path set after the the cluster is created or by the user to override defaults.
        /// </summary>
        [Input("kubeconfigPath")]
        public Input<string>? KubeconfigPath { get; set; }

        /// <summary>
        /// The kind name that is given to the created cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The node_image that kind will use (ex: kindest/node:v1.15.3).
        /// </summary>
        [Input("nodeImage")]
        public Input<string>? NodeImage { get; set; }

        /// <summary>
        /// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
        /// </summary>
        [Input("waitForReady")]
        public Input<bool>? WaitForReady { get; set; }

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Client certificate for authenticating to cluster.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// Client key for authenticating to cluster.
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Client verifies the server certificate with this CA cert.
        /// </summary>
        [Input("clusterCaCertificate")]
        public Input<string>? ClusterCaCertificate { get; set; }

        /// <summary>
        /// Kubernetes APIServer endpoint.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The kind_config that kind will use.
        /// </summary>
        [Input("kindConfig")]
        public Input<Inputs.ClusterKindConfigGetArgs>? KindConfig { get; set; }

        /// <summary>
        /// The kubeconfig for the cluster after it is created
        /// </summary>
        [Input("kubeconfig")]
        public Input<string>? Kubeconfig { get; set; }

        /// <summary>
        /// kubeconfig path set after the the cluster is created or by the user to override defaults.
        /// </summary>
        [Input("kubeconfigPath")]
        public Input<string>? KubeconfigPath { get; set; }

        /// <summary>
        /// The kind name that is given to the created cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The node_image that kind will use (ex: kindest/node:v1.15.3).
        /// </summary>
        [Input("nodeImage")]
        public Input<string>? NodeImage { get; set; }

        /// <summary>
        /// Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
        /// </summary>
        [Input("waitForReady")]
        public Input<bool>? WaitForReady { get; set; }

        public ClusterState()
        {
        }
    }
}
