// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # kind.Cluster
 *
 * Provides a Kind cluster resource. This can be used to create and delete Kind
 * clusters. It does NOT support modification to an existing kind cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kind from "@pulumi/kind";
 *
 * // Create a kind cluster of the name "test-cluster" with default kubernetes
 * // version specified in kind
 * // ref: https://github.com/kubernetes-sigs/kind/blob/master/pkg/apis/config/defaults/image.go#L21
 * const defaultCluster = new kind.Cluster("default", {});
 * ```
 *
 * To override the node image used:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kind from "@pulumi/kind";
 *
 * // Create a cluster with kind of the name "test-cluster" with kubernetes version v1.16.1
 * const defaultCluster = new kind.Cluster("default", {
 *     nodeImage: "kindest/node:v1.16.1",
 * });
 * ```
 *
 * To override the default kind config:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kind from "@pulumi/kind";
 *
 * // creating a cluster with kind of the name "test-cluster" with kubernetes version v1.18.4 and two nodes
 * const defaultCluster = new kind.Cluster("default", {
 *     kindConfig: {
 *         apiVersion: "kind.x-k8s.io/v1alpha4",
 *         kind: "Cluster",
 *         nodes: [
 *             {
 *                 role: "control-plane",
 *             },
 *             {
 *                 role: "worker",
 *             },
 *         ],
 *     },
 *     nodeImage: "kindest/node:v1.18.4",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kind from "@pulumi/kind";
 *
 * // Create a cluster with patches applied to the containerd config
 * const defaultCluster = new kind.Cluster("default", {
 *     kindConfig: {
 *         containerdConfigPatches: [`[plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
 *     endpoint = ["http://kind-registry:5000"]
 * `],
 *     },
 *     nodeImage: "kindest/node:v1.16.1",
 * });
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kind:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Client certificate for authenticating to cluster.
     */
    public /*out*/ readonly clientCertificate!: pulumi.Output<string>;
    /**
     * Client key for authenticating to cluster.
     */
    public /*out*/ readonly clientKey!: pulumi.Output<string>;
    /**
     * Client verifies the server certificate with this CA cert.
     */
    public /*out*/ readonly clusterCaCertificate!: pulumi.Output<string>;
    /**
     * Kubernetes APIServer endpoint.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The kindConfig that kind will use.
     */
    public readonly kindConfig!: pulumi.Output<outputs.ClusterKindConfig | undefined>;
    /**
     * Kubeconfig set after the the cluster is created.
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * Kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    public readonly kubeconfigPath!: pulumi.Output<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.15.3).
     */
    public readonly nodeImage!: pulumi.Output<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    public readonly waitForReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            inputs["clientKey"] = state ? state.clientKey : undefined;
            inputs["clusterCaCertificate"] = state ? state.clusterCaCertificate : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["kindConfig"] = state ? state.kindConfig : undefined;
            inputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            inputs["kubeconfigPath"] = state ? state.kubeconfigPath : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nodeImage"] = state ? state.nodeImage : undefined;
            inputs["waitForReady"] = state ? state.waitForReady : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            inputs["kindConfig"] = args ? args.kindConfig : undefined;
            inputs["kubeconfigPath"] = args ? args.kubeconfigPath : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodeImage"] = args ? args.nodeImage : undefined;
            inputs["waitForReady"] = args ? args.waitForReady : undefined;
            inputs["clientCertificate"] = undefined /*out*/;
            inputs["clientKey"] = undefined /*out*/;
            inputs["clusterCaCertificate"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["kubeconfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Client certificate for authenticating to cluster.
     */
    readonly clientCertificate?: pulumi.Input<string>;
    /**
     * Client key for authenticating to cluster.
     */
    readonly clientKey?: pulumi.Input<string>;
    /**
     * Client verifies the server certificate with this CA cert.
     */
    readonly clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Kubernetes APIServer endpoint.
     */
    readonly endpoint?: pulumi.Input<string>;
    /**
     * The kindConfig that kind will use.
     */
    readonly kindConfig?: pulumi.Input<inputs.ClusterKindConfig>;
    /**
     * Kubeconfig set after the the cluster is created.
     */
    readonly kubeconfig?: pulumi.Input<string>;
    /**
     * Kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    readonly kubeconfigPath?: pulumi.Input<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.15.3).
     */
    readonly nodeImage?: pulumi.Input<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    readonly waitForReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The kindConfig that kind will use.
     */
    readonly kindConfig?: pulumi.Input<inputs.ClusterKindConfig>;
    /**
     * Kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    readonly kubeconfigPath?: pulumi.Input<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.15.3).
     */
    readonly nodeImage?: pulumi.Input<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    readonly waitForReady?: pulumi.Input<boolean>;
}
